import { Request, Response } from "express";
import Electricity, { IElectricity } from "../models/Electricity";
import moment from "moment";

// B·ªô nh·ªõ t·∫°m ƒë·ªÉ l∆∞u d·ªØ li·ªáu cu·ªëi ng√†y
let latestData: Record<string, IElectricity> = {};

// Nh·∫≠n d·ªØ li·ªáu t·ª´ ESP32
export const receiveElectricityData = (req: Request, res: Response): void => {
  const { room_id, user_id, voltage, power, power_factor, frequency, energy, current } = req.body;

  // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
  if (!room_id || !user_id || voltage === undefined || current === undefined || power === undefined) {
    res.status(400).json({ message: "Thi·∫øu th√¥ng tin d·ªØ li·ªáu!" });
    return;
  }

  // X·ª≠ l√Ω n·∫øu gi√° tr·ªã b·ªã l·ªói (NaN)
  const safeVoltage = isNaN(voltage) ? 0 : voltage;
  const safeCurrent = isNaN(current) ? 0 : current;
  const safePower = isNaN(power) ? 0 : power;
  const safePowerFactor = isNaN(power_factor) ? 0 : power_factor;
  const safeFrequency = isNaN(frequency) ? 0 : frequency;
  const safeEnergy = isNaN(energy) ? 0 : energy;

  // T√≠nh ti·ªÅn ƒëi·ªán (3000ƒë/kWh)
  const electricityPrice = 3000;
  const total_cost = (safePower / 1000) * electricityPrice;

  // C·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o b·ªô nh·ªõ t·∫°m
  latestData[room_id] = {
    room_id,
    user_id,
    voltage: safeVoltage,
    current: safeCurrent,
    power: safePower,
    power_factor: safePowerFactor,
    frequency: safeFrequency,
    energy: safeEnergy,
    total_cost,
    timestamp: new Date(),
  } as IElectricity;

  console.log(`üì° Nh·∫≠n d·ªØ li·ªáu t·ª´ ph√≤ng ${room_id}: ${safeVoltage}V - ${safeCurrent}A - ${safePower}W`);

  res.json({ message: "D·ªØ li·ªáu ƒë√£ nh·∫≠n!" });
};

// H√†m l∆∞u d·ªØ li·ªáu v√†o cu·ªëi ng√†y
export const saveEndOfDayData = async (): Promise<void> => {
  const now = moment().format("YYYY-MM-DD HH:mm:ss");
  console.log(`üíæ L∆∞u d·ªØ li·ªáu cu·ªëi ng√†y v√†o l√∫c: ${now}`);

  try {
    for (const room_id in latestData) {
      const data = latestData[room_id];
      const newRecord = new Electricity(data);
      await newRecord.save();
      console.log(`‚úÖ D·ªØ li·ªáu ph√≤ng ${room_id} ƒë√£ l∆∞u v√†o database.`);
    }

    // X√≥a b·ªô nh·ªõ t·∫°m ƒë·ªÉ chu·∫©n b·ªã cho ng√†y m·ªõi
    latestData = {};
  } catch (error) {
    console.error("‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu cu·ªëi ng√†y:", error);
  }
};
